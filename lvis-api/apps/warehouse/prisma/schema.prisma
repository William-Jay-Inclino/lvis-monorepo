generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= DATA MANAGEMENT ========================= 

model ItemType {
  id         Int     @id @default(autoincrement())
  code             String  @unique 
  name String

  items Item[]

  created_at DateTime  @default(now()) @db.Timestamptz

  @@map("item_type")
}

model Supplier {
  id       String @id @default(uuid())
  name     String
  contact  String
  tin  String @default("")
  address  String @default("")
  vat_type Int    @default(1)
  is_vat_registered Boolean @default(false)
  contact_person  String?
  remarks  String?

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  MEQSSupplier MEQSSupplier[]


  @@index([vat_type])
  @@index([deleted_at])
  @@index([created_by])
  @@map("supplier")
}

model Unit {
  id   String @id @default(uuid())
  name String @unique

  canvass_items CanvassItem[]
  items         Item[]

  created_at DateTime  @default(now()) @db.Timestamptz

  @@map("unit")
}

model Station {
  id         String         @id @default(uuid())
  name       String

  items      ItemLocation[]
  osrivs OSRIV[]
  mrvs MRV[]
  serivs SERIV[]

  created_at DateTime  @default(now()) @db.Timestamptz

  @@map("station")
}

model Project {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  
  mrv MRV[]
  project_items ProjectItem[]

  created_at DateTime  @default(now()) @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  @@map("project")
}

model Pending {
  id               Int      @id @default(autoincrement())
  approver_id      String
  reference_number      String
  reference_table   String
  description      String
  transaction_date  DateTime @default(now()) @db.Timestamptz
  approver_notes String?


  @@unique([approver_id, reference_number, reference_table])
  @@index([approver_id])
  @@index([transaction_date])
  @@map("pending")
}

model Setting {
  id         Int     @id @default(autoincrement())
  key String @unique
  value String 

  @@map("setting")
}

model MwoSequenceTracker {
  id        Int      @id @default(autoincrement())
  yearMonth String   @unique 
  sequence  Int      @default(0) 
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  @@map("mwo_sequence_tracker")
}

// ========================= STOCK ITEM INVENTORY ========================= 

model Item {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  item_type_id     Int
  unit_id          String
  code             String  @unique
  description      String?
  total_quantity   Int
  quantity_on_queue   Int @default(0)
  alert_level      Int     @default(20)

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  item_type         ItemType          @relation(fields: [item_type_id], references: [id], onDelete: Restrict)
  item_transactions ItemTransaction[]
  unit              Unit              @relation(fields: [unit_id], references: [id], onDelete: Restrict)
  canvass_items     CanvassItem[]
  item_locations ItemLocation[]

  osriv_items OSRIVItem[]
  seriv_items SERIVItem[]
  mrv_items MRVItem[]
  mcrt_items MCRTItem[]
  mst_items MSTItem[]

  project_item ProjectItem?

  @@index([item_type_id])
  @@index([deleted_at])
  @@index([created_by])
  @@map("item")
}

model ProjectItem {
  id         Int     @id @default(autoincrement())
  project_id String @db.Uuid
  item_id String? @unique @db.Uuid

  item Item? @relation(fields: [item_id], references: [id], onDelete: Cascade)
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id]) 
  @@index([item_id]) 
  @@map("project_item")
}

model ItemLocation {
  id               String @id @default(uuid())
  item_id          String @db.Uuid
  station_id       String
  quantity_on_hand Int

  created_at DateTime  @default(now()) @db.Timestamptz

  item                  Item           @relation(fields: [item_id], references: [id], onDelete: Cascade)
  station               Station        @relation(fields: [station_id], references: [id], onDelete: Cascade)
  origin_movements      ItemMovement[] @relation("Origin")
  destination_movements ItemMovement[] @relation("Destination")


  @@map("item_location")
}

model ItemMovement {
  id             String @id @default(uuid())
  origin_id      String
  destination_id String
  quantity_moved Int

  created_at DateTime  @default(now()) @db.Timestamptz

  origin      ItemLocation @relation("Origin", fields: [origin_id], references: [id], onDelete: Cascade)
  destination ItemLocation @relation("Destination", fields: [destination_id], references: [id], onDelete: Cascade)


  @@map("item_movement")
}

model ItemTransaction {
  id         Int     @id @default(autoincrement())
  item_id    String @db.Uuid
  rr_item_id String? @unique
  osriv_item_id String? @unique
  seriv_item_id String? @unique
  mrv_item_id String? @unique
  mcrt_item_id String? @unique
  mst_item_id String? @unique
  type       Int
  quantity   Int
  price      Float
  remarks    String?
  is_initial Boolean @default(false)

  item    Item    @relation(fields: [item_id], references: [id], onDelete: Cascade)
  rr_item RRItem? @relation(fields: [rr_item_id], references: [id], onDelete: Cascade)
  osriv_item OSRIVItem? @relation(fields: [osriv_item_id], references: [id], onDelete: Cascade)
  seriv_item SERIVItem? @relation(fields: [seriv_item_id], references: [id], onDelete: Cascade)
  mrv_item MRVItem? @relation(fields: [mrv_item_id], references: [id], onDelete: Cascade)
  mcrt_item MCRTItem? @relation(fields: [mcrt_item_id], references: [id], onDelete: Cascade)
  mst_item MSTItem? @relation(fields: [mst_item_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now()) @db.Timestamptz
  created_by String   @default("admin")


  @@index([item_id])
  @@map("item_transaction")
}

model ItemCodeTracker {
  id         Int     @id @default(autoincrement())
  item_code      String 
  year Int
  last_incremental Int
  
  @@unique([item_code, year])
  @@map("item_code_tracker")
}



// ========================= PURCHASING ========================= 

model Canvass {
  id              String   @id @default(uuid())
  rc_number       String   @unique
  date_requested  DateTime @db.Timestamptz
  purpose         String
  notes           String?
  requested_by_id String

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  canvass_items CanvassItem[]
  jo            JO?
  rv            RV?
  spr           SPR?

  
  @@index([date_requested, requested_by_id])
  @@index([requested_by_id])
  @@index([date_requested])
  @@map("canvass")
}

model CanvassItem {
  id          String  @id @default(uuid())
  canvass_id  String
  unit_id     String?
  item_id     String? @db.Uuid
  description String
  quantity    Int

  meqs_supplier_items MEQSSupplierItem[]
  canvass             Canvass            @relation(fields: [canvass_id], references: [id], onDelete: Cascade)
  unit                Unit?              @relation(fields: [unit_id], references: [id], onDelete: Restrict)
  item                Item?              @relation(fields: [item_id], references: [id], onDelete: Restrict)


  @@index([canvass_id])
  @@index([item_id])
  @@map("canvass_item")
}

model RV {
  id                String    @id @default(uuid())
  rv_number         String    @unique
  canvass_number String
  canvass_id        String?    @unique
  classification_id String?
  date_requested    DateTime @db.Timestamptz
  work_order_no     String?
  work_order_date   DateTime? @db.Timestamptz
  notes             String
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  canvass      Canvass?      @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs         MEQS?
  rv_approvers RVApprover[]


  @@index([date_requested])
  @@index([approval_status])
  @@index([created_by])
  @@map("request_voucher")
}

model RVApprover {
  id            String    @id @default(uuid())
  rv_id         String
  approver_id   String
  date_approval DateTime?@db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  rv RV @relation(fields: [rv_id], references: [id], onDelete: Cascade)


  @@unique([rv_id, order]) // para pag update sa specific approver
  @@index([approver_id])
  @@index([rv_id])
  @@map("rv_approver")
}

model JO {
  id                String   @id @default(uuid())
  jo_number         String   @unique
  canvass_number String 
  date_requested    DateTime @db.Timestamptz
  canvass_id        String?   @unique
  equipment         String @default("")
  classification_id String?
  department_id     String
  division_id     String?
  notes             String
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  canvass      Canvass?      @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs         MEQS?
  jo_approvers JOApprover[]


  @@index([date_requested])
  @@index([approval_status])
  @@index([department_id])
  @@index([division_id])
  @@index([created_by])
  @@map("job_order")
}

model JOApprover {
  id            String    @id @default(uuid())
  jo_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  jo JO @relation(fields: [jo_id], references: [id], onDelete: Cascade)


  @@unique([jo_id, order]) // para pag update sa specific approver
  @@index([approver_id])
  @@index([jo_id])
  @@map("jo_approver")
}

model SPR {
  id                String   @id @default(uuid())
  canvass_number String
  spr_number        String   @unique
  date_requested    DateTime @db.Timestamptz
  canvass_id        String?   @unique
  vehicle_id        String
  classification_id String?
  notes             String
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  canvass       Canvass?       @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs          MEQS?
  spr_approvers SPRApprover[]
  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)


  @@index([date_requested])
  @@index([vehicle_id])
  @@index([approval_status])
  @@index([created_by])
  @@map("spare_parts_request")
}

model SPRApprover {
  id            String    @id @default(uuid())
  spr_id        String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  spr SPR @relation(fields: [spr_id], references: [id], onDelete: Cascade)


  @@unique([spr_id, order]) // para pag update sa specific approver
  @@index([approver_id])
  @@index([spr_id])
  @@map("spr_approver")
}

model MEQS {
  id          String   @id @default(uuid())
  jo_id       String?  @unique
  jo_number       String?
  rv_id       String?  @unique
  rv_number       String? 
  spr_id      String?  @unique
  spr_number       String?
  meqs_number String   @unique
  meqs_date   DateTime @db.Timestamptz
  notes       String
  approval_status Int?

  created_by   String
  updated_by   String?
  cancelled_by String?

  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz
  cancelled_at DateTime? @db.Timestamptz

  jo             JO?            @relation(fields: [jo_id], references: [id], onDelete: Restrict)
  rv             RV?            @relation(fields: [rv_id], references: [id], onDelete: Restrict)
  spr            SPR?           @relation(fields: [spr_id], references: [id], onDelete: Restrict)
  meqs_approvers MEQSApprover[]
  meqs_suppliers MEQSSupplier[]


  @@index([meqs_date])
  @@index([approval_status])
  @@index([created_by])
  @@map("material_equipment_quotation_summary")
}

model MEQSSupplier {
  id            String @id @default(uuid())
  meqs_id       String
  supplier_id   String
  payment_terms String

  meqs                MEQS                     @relation(fields: [meqs_id], references: [id], onDelete: Cascade)
  supplier            Supplier                 @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  attachments         MEQSSupplierAttachment[]
  meqs_supplier_items MEQSSupplierItem[]
  po                  PO?


  @@unique([meqs_id, supplier_id])
  @@index([meqs_id])
  @@index([supplier_id])
  @@map("meqs_supplier")
}

model MEQSSupplierItem {
  id               String  @id @default(uuid())
  meqs_supplier_id String
  canvass_item_id  String
  price            Float
  notes            String
  is_awarded       Boolean @default(false)
  vat_type         Int     @default(1)

  canvass_item  CanvassItem  @relation(fields: [canvass_item_id], references: [id], onDelete: Cascade)
  meqs_supplier MEQSSupplier @relation(fields: [meqs_supplier_id], references: [id], onDelete: Cascade)

  rr_items       RRItem[]  


  @@index([meqs_supplier_id])
  @@index([canvass_item_id])
  @@map("meqs_supplier_item")
}

model MEQSSupplierAttachment {
  id               String @id @default(uuid())
  meqs_supplier_id String
  filename         String @default("no_filename")
  src              String

  meqs_supplier MEQSSupplier @relation(fields: [meqs_supplier_id], references: [id], onDelete: Cascade)


  @@index([meqs_supplier_id])
  @@map("meqs_supplier_attachment")
}

model MEQSApprover {
  id            String    @id @default(uuid())
  meqs_id       String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  meqs MEQS @relation(fields: [meqs_id], references: [id], onDelete: Cascade)


  @@index([meqs_id])
  @@index([approver_id])
  @@map("meqs_approver")
}

model PO {
  id               String   @id @default(uuid())
  meqs_supplier_id String?   @unique
  meqs_number        String   
  po_number        String   @unique
  fund_source_id   String?
  po_date          DateTime @db.Timestamptz
  notes            String
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  meqs_supplier MEQSSupplier? @relation(fields: [meqs_supplier_id], references: [id], onDelete: Restrict)
  rrs           RR[]
  po_approvers  POApprover[]


  @@index([po_date])
  @@index([fund_source_id])
  @@index([created_by])
  @@index([approval_status])
  @@map("purchase_order")
}

model POApprover {
  id            String    @id @default(uuid())
  po_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String?
  status        Int
  label         String
  order         Int

  po PO @relation(fields: [po_id], references: [id], onDelete: Cascade)


  @@index([approver_id])
  @@index([po_id])
  @@map("po_approver")
}

model RR {
  id              String   @id @default(uuid())
  po_id           String?
  po_number       String 
  rr_number       String   @unique
  rr_date         DateTime @db.Timestamptz
  received_by_id  String
  invoice_number  String @unique
  delivery_number String?
  notes           String
  delivery_charge Float
  is_completed    Boolean  @default(false)
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?  @db.Timestamptz
  created_at   DateTime  @default(now())  @db.Timestamptz
  updated_at   DateTime  @updatedAt  @db.Timestamptz

  po           PO?           @relation(fields: [po_id], references: [id], onDelete: Restrict)
  rr_approvers RRApprover[]
  rr_items     RRItem[]


  @@index([po_id])
  @@index([received_by_id])
  @@index([approval_status])
  @@index([rr_date])
  @@index([created_by])
  @@map("receiving_report")
}

model RRApprover {
  id            String    @id @default(uuid())
  rr_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  rr RR @relation(fields: [rr_id], references: [id], onDelete: Cascade)


  @@index([approver_id])
  @@index([rr_id])
  @@map("rr_approver")
}

model RRItem {
  id                    String  @id @default(uuid())
  rr_id                 String
  meqs_supplier_item_id String
  quantity_accepted     Int

  rr                 RR                @relation(fields: [rr_id], references: [id], onDelete: Cascade)
  item_transaction   ItemTransaction?

  meqs_supplier_item MEQSSupplierItem @relation(fields: [meqs_supplier_item_id], references: [id], onDelete: Restrict)


  @@index([rr_id])
  @@index([meqs_supplier_item_id])
  @@map("rr_item")
}





// ========================= WAREHOUSING ========================= 

model OSRIV {
  id                String    @id @default(uuid())
  osriv_number         String    @unique
  date_requested    DateTime @db.Timestamptz
  exp_date    DateTime @db.Timestamptz
  purpose             String
  note             String @default("")
  is_completed    Boolean  @default(false)
  approval_status Int?

  requested_by_id String
  item_from_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  osriv_approvers OSRIVApprover[]
  osriv_items OSRIVItem[]


  @@index([date_requested])
  @@index([requested_by_id])
  @@index([item_from_id])
  @@index([approval_status])
  @@index([exp_date])
  @@index([created_by])
  @@map("osriv")
}

model OSRIVApprover {
  id            String    @id @default(uuid())
  osriv_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  osriv OSRIV @relation(fields: [osriv_id], references: [id], onDelete: Cascade)

  @@unique([osriv_id, order]) // para pag update sa specific approver
  @@index([osriv_id])
  @@index([approver_id])
  @@map("osriv_approver")
}

model OSRIVItem {
  id            String    @id @default(uuid())
  osriv_id         String
  item_id         String @db.Uuid
  quantity     Int
  price      Float @default(0)

  osriv OSRIV @relation(fields: [osriv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?


  @@index([osriv_id])
  @@index([item_id])
  @@map("osriv_item")
}

model SERIV {
  id                String    @id @default(uuid())
  seriv_number         String    @unique
  date_requested    DateTime @db.Timestamptz
  exp_date    DateTime @db.Timestamptz
  purpose             String
  note             String @default("")
  is_completed    Boolean  @default(false)
  approval_status Int?

  request_type Int

  or_number String?
  mwo_number String? @unique
  cwo_number String?
  jo_number String?
  
  consumer_name String
  location String

  requested_by_id String
  withdrawn_by_id String
  item_from_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  seriv_approvers SERIVApprover[]
  seriv_items SERIVItem[]
  mcrts MCRT[]


  @@index([date_requested])
  @@index([requested_by_id])
  @@index([approval_status])
  @@index([request_type])
  @@index([item_from_id])
  @@index([exp_date])
  @@index([created_by])
  @@map("seriv")
}

model SERIVApprover {
  id            String    @id @default(uuid())
  seriv_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int


  seriv SERIV @relation(fields: [seriv_id], references: [id], onDelete: Cascade)


  @@unique([seriv_id, order]) // para pag update sa specific approver
  @@index([seriv_id])
  @@index([approver_id])
  @@map("seriv_approver")
}

model SERIVItem {
  id            String    @id @default(uuid())
  seriv_id         String
  item_id         String @db.Uuid
  quantity     Int
  price      Float @default(0)

  seriv SERIV @relation(fields: [seriv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?


  @@index([seriv_id])
  @@index([item_id])
  @@map("seriv_item")
}

model MRV {
  id                String    @id @default(uuid())
  project_id                String? @db.Uuid
  mrv_number         String    @unique
  date_requested    DateTime @db.Timestamptz
  exp_date    DateTime @db.Timestamptz
  purpose             String
  note             String @default("")
  is_completed    Boolean  @default(false)
  approval_status Int?

  request_type Int

  or_number String?
  mwo_number String? @unique
  cwo_number String?
  jo_number String?

  consumer_name String
  location String

  requested_by_id String
  withdrawn_by_id String
  item_from_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  mrv_approvers MRVApprover[]
  mrv_items MRVItem[]
  mct MCT?
  project Project? @relation(fields: [project_id], references: [id], onDelete: Restrict)


  @@index([date_requested])
  @@index([requested_by_id])
  @@index([project_id])
  @@index([approval_status])
  @@index([withdrawn_by_id])
  @@index([request_type])
  @@index([exp_date])
  @@index([item_from_id])
  @@index([created_by])
  @@map("mrv")
}

model MRVApprover {
  id            String    @id @default(uuid())
  mrv_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int


  mrv MRV @relation(fields: [mrv_id], references: [id], onDelete: Cascade)


  @@unique([mrv_id, order]) // para pag update sa specific approver
  @@index([mrv_id])
  @@index([approver_id])
  @@map("mrv_approver")
}

model MRVItem {
  id            String    @id @default(uuid())
  mrv_id         String
  item_id         String @db.Uuid
  quantity     Int
  price      Float @default(0)

  mrv MRV @relation(fields: [mrv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?


  @@index([mrv_id])
  @@index([item_id])
  @@map("mrv_item")
}

model MCT {
  id                String    @id @default(uuid())
  mrv_id                String? @unique
  mrv_number         String   
  mct_number         String    @unique
  mct_date    DateTime @db.Timestamptz
  is_completed    Boolean  @default(false)
  approval_status Int?

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  mrv      MRV?      @relation(fields: [mrv_id], references: [id], onDelete: Restrict)
  mct_approvers MCTApprover[]
  mcrts MCRT[]


  @@index([mct_date])
  @@index([approval_status])
  @@index([created_by])
  @@map("mct")
}

model MCTApprover {
  id            String    @id @default(uuid())
  mct_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  mct MCT @relation(fields: [mct_id], references: [id], onDelete: Cascade)

  @@unique([mct_id, order]) // para pag update sa specific approver
  @@index([mct_id])
  @@index([approver_id])
  @@map("mct_approver")
}

model MCRT {
  id                String    @id @default(uuid())
  mct_id                String?
  mct_number String?
  seriv_id                String?
  seriv_number String?
  mcrt_number         String    @unique
  mcrt_date    DateTime @db.Timestamptz
  is_completed    Boolean  @default(false)
  approval_status Int?

  returned_by_id String

  note String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  mct      MCT?      @relation(fields: [mct_id], references: [id], onDelete: Restrict)
  seriv      SERIV?      @relation(fields: [seriv_id], references: [id], onDelete: Restrict)
  mcrt_approvers MCRTApprover[]
  mcrt_items MCRTItem[]


  @@index([mcrt_date])
  @@index([seriv_id])
  @@index([mct_id])
  @@index([approval_status])
  @@index([returned_by_id])
  @@index([created_by])
  @@map("mcrt")
}

model MCRTApprover {
  id            String    @id @default(uuid())
  mcrt_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  mcrt MCRT @relation(fields: [mcrt_id], references: [id], onDelete: Cascade)

  @@unique([mcrt_id, order]) // para pag update sa specific approver
  @@index([mcrt_id])
  @@index([approver_id])
  @@map("mcrt_approver")
}

model MCRTItem {
  id            String    @id @default(uuid())
  mcrt_id         String
  item_id         String @db.Uuid
  quantity     Int
  price      Float @default(0)

  mcrt MCRT @relation(fields: [mcrt_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  @@index([mcrt_id])
  @@index([item_id])
  @@map("mcrt_item")
}

model MST {
  id                String    @id @default(uuid())
  mst_number         String    @unique
  mst_date    DateTime @db.Timestamptz
  is_completed    Boolean  @default(false)
  approval_status Int?

  returned_by_id String

  cwo_number String?
  mwo_number String?
  jo_number String?

  remarks String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime? @db.Timestamptz
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz

  mst_approvers MSTApprover[]
  mst_items MSTItem[]


  @@index([mst_date])
  @@index([approval_status])
  @@index([returned_by_id])
  @@index([created_at])
  @@index([created_by])
  @@map("mst")
}

model MSTApprover {
  id            String    @id @default(uuid())
  mst_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int
  
  mst MST @relation(fields: [mst_id], references: [id], onDelete: Cascade)

  @@unique([mst_id, order]) // para pag update sa specific approver
  @@index([mst_id])
  @@index([approver_id])
  @@map("mst_approver")
}

model MSTItem {
  id            String    @id @default(uuid())
  mst_id         String
  item_id         String @db.Uuid
  quantity     Int
  price      Float @default(0)
  status        Int @default(0)

  mst MST @relation(fields: [mst_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  @@index([mst_id])
  @@index([item_id])
  @@map("mst_item")
}



// ========================= MOTORPOOL ========================= 

model Vehicle {
  id            String     @id @default(uuid())
  vehicle_number String @unique
  plate_number String @unique
  rf_id String? @unique
  classification_id Int 
  assignee_id String 
  name String 
  date_acquired DateTime @db.Timestamptz
  status Int 

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  trip_tickets TripTicket[]
  gas_slips GasSlip[]
  sprs SPR[]

  service_history VehicleMaintenance[]

  @@index([assignee_id]) 
  @@index([classification_id]) 
  @@index([deleted_at]) 
  @@index([date_acquired]) 
  @@index([status]) 
  @@index([created_by]) 
  @@map("vehicle")
}

model TripTicket {
  id            String     @id @default(uuid())
  trip_number String @unique
  vehicle_id String
  driver_id String
  passengers String?
  destination String 
  purpose String 
  start_time DateTime @db.Timestamptz
  end_time DateTime @db.Timestamptz
  actual_start_time DateTime? @db.Timestamptz
  actual_end_time DateTime? @db.Timestamptz

  is_operation Boolean   
  is_stay_in Boolean   
  is_personal Boolean   
  is_out_of_coverage Boolean   
  
  prepared_by_id String 
  status Int

  cancelled_by String?
  created_by String
  updated_by String?

  cancelled_at DateTime? @db.Timestamptz
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Restrict)
  trip_ticket_approvers TripTicketApprover[]

  @@index([start_time])
  @@index([start_time, end_time])
  @@index([actual_start_time, actual_end_time])
  @@index([vehicle_id])
  @@index([driver_id])
  @@index([prepared_by_id])
  @@index([status])
  @@index([created_by])
  @@map("trip_ticket")
}

model TripTicketApprover {
  id            String    @id @default(uuid())
  trip_ticket_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  trip_ticket TripTicket @relation(fields: [trip_ticket_id], references: [id], onDelete: Cascade)

  @@unique([trip_ticket_id, order])
  @@index([trip_ticket_id])
  @@index([approver_id])
  @@map("trip_ticket_approver")
}

model GasSlip {
  id            String     @id @default(uuid())
  gas_slip_number String @unique
  vehicle_id String
  driver_id String  
  gas_station_id Int 
  fuel_type_id Int 
  requested_by_id String 
  approval_status Int?
  used_on DateTime? @db.Timestamptz
  
  with_container Boolean 
  liter_in_text String 
  actual_liter Float?
  price_per_liter Float?  
  purpose String 
  is_posted Boolean?
  
  print_count Int @default(0)

  cancelled_by String?
  created_by String
  updated_by String?

  cancelled_at DateTime? @db.Timestamptz
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Restrict)
  gas_station GasStation @relation(fields: [gas_station_id], references: [id], onDelete: Restrict)
  fuel_type FuelType @relation(fields: [fuel_type_id], references: [id], onDelete: Restrict)
  gas_slip_approvers GasSlipApprover[]

  @@index([vehicle_id]) 
  @@index([driver_id]) 
  @@index([gas_station_id]) 
  @@index([requested_by_id]) 
  @@index([fuel_type_id]) 
  @@index([approval_status]) 
  @@index([created_by]) 
  @@map("gas_slip")
}

model GasSlipApprover {
  id            String    @id @default(uuid())
  gas_slip_id         String
  approver_id   String
  date_approval DateTime? @db.Timestamptz
  notes         String
  status        Int
  label         String
  order         Int

  gas_slip GasSlip @relation(fields: [gas_slip_id], references: [id], onDelete: Cascade)

  @@unique([gas_slip_id, order])
  @@index([gas_slip_id])
  @@index([approver_id])
  @@map("gas_slip_approver")
}

model GasStation {
  id         Int     @id @default(autoincrement())
  name String

  gas_slips GasSlip[]

  @@map("gas_station")
}

model FuelType {
  id         Int     @id @default(autoincrement())
  name String

  gas_slips GasSlip[]

  @@map("fuel_type")
}

model VehicleService {
  id String @id @default(uuid())
  name String 

  service_logs VehicleMaintenanceDetail[]
  @@map("vehicle_service")
}

model ServiceCenter {
  id String @id @default(uuid())
  name String @unique
  location String 
  contact_person String @default("N/A")
  contact_number String @default("N/A")
  remarks String @default("")

  service_records VehicleMaintenance[]
  @@map("service_center")
}

model VehicleMaintenance {
  id String @id @default(uuid())
  ref_number String @unique
  vehicle_id String 
  service_center_id String 
  service_date DateTime @db.Timestamptz
  service_mileage Int 
  next_service_date DateTime @db.Timestamptz
  next_service_mileage Int 
  cost Float @default(0)
  remarks String 
  performed_by String 
  is_completed Boolean @default(false)

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Restrict)
  service_center ServiceCenter @relation(fields: [service_center_id], references: [id], onDelete: Restrict)
  services VehicleMaintenanceDetail[]

  @@index([vehicle_id])
  @@index([next_service_date])
  @@index([service_date])
  @@index([service_center_id])
  @@index([created_by])
  @@map("vehicle_maintenance")
}

model VehicleMaintenanceDetail {
  id String @id @default(uuid())
  maintenance_id String 
  service_id String 
  note String @default("")

  vehicle_maintanance VehicleMaintenance @relation(fields: [maintenance_id], references: [id], onDelete: Cascade)
  service VehicleService @relation(fields: [service_id], references: [id], onDelete: Restrict)

  @@index([maintenance_id])
  @@index([service_id])
  @@map("vehicle_maintenance_detail")
}