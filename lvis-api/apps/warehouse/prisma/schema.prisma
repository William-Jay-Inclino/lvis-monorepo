generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= DATA MANAGEMENT ========================= 

// model ItemType {
//   id   String @id @default(uuid())
//   name String

//   created_by String
//   updated_by String?
//   deleted_by String?

//   created_at DateTime  @default(now())
//   updated_at DateTime  @updatedAt
//   deleted_at DateTime?

//   items Item[]

//   metadata Json?

//   @@map("item_type")
// }

model Supplier {
  id       String @id @default(uuid())
  name     String
  contact  String
  tin  String @default("")
  address  String @default("")
  vat_type Int    @default(1)
  is_vat_registered Boolean @default(false)

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  MEQSSupplier MEQSSupplier[]

  metadata Json?

  @@index([name])
  @@map("supplier")
}

model Unit {
  id   String @id @default(uuid())
  name String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  canvass_items CanvassItem[]
  items         Item[]

  metadata Json?

  @@map("unit")
}

model Vehicle {
  id           String @id @default(uuid())
  name         String
  plate_number String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  sprs SPR[]

  metadata Json?

  @@map("vehicle")
}

model Station {
  id         String         @id @default(uuid())
  name       String
  location    String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  items      ItemLocation[]

  metadata Json?

  osrivs OSRIV[]
  mrvs MRV[]
  serivs SERIV[]


  @@map("station")
}

model Project {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  metadata Json?
  
  mrv MRV[]

  @@map("project")
}

model Pending {
  id               Int      @id @default(autoincrement())
  approver_id      String
  reference_number      String
  reference_table   String
  description      String
  transaction_date  DateTime @default(now())


  @@unique([approver_id, reference_number, reference_table])
  @@index([reference_number, approver_id, reference_table, transaction_date])
  @@map("pending")
}





// ========================= STOCK ITEM INVENTORY ========================= 

model Item {
  id               String  @id @default(uuid())
  // item_type_id     String
  unit_id          String
  code             String  @unique
  name             String
  description      String?
  total_quantity   Int
  quantity_on_queue   Int @default(0)
  initial_quantity Int
  alert_level      Int     @default(20)
  item_type Int 

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // item_type         ItemType          @relation(fields: [item_type_id], references: [id], onDelete: Restrict)
  item_transactions ItemTransaction[]
  unit              Unit              @relation(fields: [unit_id], references: [id], onDelete: Restrict)
  canvass_items     CanvassItem[]
  item_locations ItemLocation[]

  osriv_items OSRIVItem[]
  seriv_items SERIVItem[]
  mrv_items MRVItem[]
  mcrt_items MCRTItem[]
  mst_items MSTItem[]

  metadata Json?

  @@index([item_type, unit_id, name, created_by])
  @@map("item")
}

model ItemLocation {
  id               String @id @default(uuid())
  item_id          String
  station_id       String
  quantity_on_hand Int

  created_by String
  created_at DateTime  @default(now())

  item                  Item           @relation(fields: [item_id], references: [id], onDelete: Cascade)
  station               Station        @relation(fields: [station_id], references: [id], onDelete: Cascade)
  origin_movements      ItemMovement[] @relation("Origin")
  destination_movements ItemMovement[] @relation("Destination")

  metadata Json?

  @@map("item_location")
}

model ItemMovement {
  id             String @id @default(uuid())
  origin_id      String
  destination_id String
  quantity_moved Int

  created_by String
  created_at DateTime  @default(now())

  origin      ItemLocation @relation("Origin", fields: [origin_id], references: [id], onDelete: Cascade)
  destination ItemLocation @relation("Destination", fields: [destination_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@map("item_movement")
}

model ItemTransaction {
  id         Int     @id @default(autoincrement())
  item_id    String
  rr_item_id String? @unique
  osriv_item_id String? @unique
  seriv_item_id String? @unique
  mrv_item_id String? @unique
  mcrt_item_id String? @unique
  type       Int
  quantity   Int
  price      Float
  remarks    String?
  is_initial Boolean @default(false)

  item    Item    @relation(fields: [item_id], references: [id], onDelete: Cascade)
  rr_item RRItem? @relation(fields: [rr_item_id], references: [id], onDelete: Cascade)
  osriv_item OSRIVItem? @relation(fields: [osriv_item_id], references: [id], onDelete: Cascade)
  seriv_item SERIVItem? @relation(fields: [seriv_item_id], references: [id], onDelete: Cascade)
  mrv_item MRVItem? @relation(fields: [mrv_item_id], references: [id], onDelete: Cascade)
  mcrt_item MCRTItem? @relation(fields: [mcrt_item_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  created_by String   @default("admin")

  metadata Json?

  @@index([item_id])
  @@map("item_transaction")
}





// ========================= PURCHASING ========================= 

model Canvass {
  id              String   @id @default(uuid())
  rc_number       String   @unique
  date_requested  DateTime 
  purpose         String
  notes           String?
  requested_by_id String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  canvass_items CanvassItem[]
  jo            JO?
  rv            RV?
  spr           SPR?

  metadata Json?
  
  @@index([date_requested, requested_by_id])
  @@map("canvass")
}

model CanvassItem {
  id          String  @id @default(uuid())
  canvass_id  String
  unit_id     String?
  item_id     String?
  description String
  quantity    Int

  meqs_supplier_items MEQSSupplierItem[]
  canvass             Canvass            @relation(fields: [canvass_id], references: [id], onDelete: Cascade)
  unit                Unit?              @relation(fields: [unit_id], references: [id], onDelete: Restrict)
  item                Item?              @relation(fields: [item_id], references: [id], onDelete: Restrict)

  metadata Json?

  @@index([canvass_id, unit_id, item_id])
  @@map("canvass_item")
}

model RV {
  id                String    @id @default(uuid())
  rv_number         String    @unique
  canvass_id        String?    @unique
  classification_id String?
  supervisor_id     String
  date_requested    DateTime
  work_order_no     String?
  work_order_date   DateTime?
  notes             String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  canvass      Canvass?      @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs         MEQS?
  rv_approvers RVApprover[]

  metadata Json?

  @@index([date_requested])
  @@map("request_voucher")
}

model RVApprover {
  id            String    @id @default(uuid())
  rv_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int
  is_supervisor Boolean @default(false)

  rv RV @relation(fields: [rv_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([rv_id])
  @@map("rv_approver")
}

model JO {
  id                String   @id @default(uuid())
  jo_number         String   @unique
  date_requested    DateTime
  canvass_id        String?   @unique
  equipment         String @default("")
  classification_id String?
  department_id     String
  supervisor_id     String
  notes             String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  canvass      Canvass?      @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs         MEQS?
  jo_approvers JOApprover[]

  metadata Json?

  @@index([date_requested])
  @@map("job_order")
}

model JOApprover {
  id            String    @id @default(uuid())
  jo_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int
  is_supervisor Boolean @default(false)

  jo JO @relation(fields: [jo_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([jo_id])
  @@map("jo_approver")
}

model SPR {
  id                String   @id @default(uuid())
  spr_number        String   @unique
  date_requested    DateTime
  canvass_id        String?   @unique
  vehicle_id        String
  classification_id String?
  supervisor_id     String
  notes             String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  canvass       Canvass?       @relation(fields: [canvass_id], references: [id], onDelete: Restrict)
  meqs          MEQS?
  vehicle       Vehicle       @relation(fields: [vehicle_id], references: [id], onDelete: Restrict)
  spr_approvers SPRApprover[]

  metadata Json?

  @@index([date_requested])
  @@map("spare_parts_request")
}

model SPRApprover {
  id            String    @id @default(uuid())
  spr_id        String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int
  is_supervisor Boolean @default(false)

  spr SPR @relation(fields: [spr_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([spr_id])
  @@map("spr_approver")
}

model MEQS {
  id          String   @id @default(uuid())
  jo_id       String?  @unique
  rv_id       String?  @unique
  spr_id      String?  @unique
  meqs_number String   @unique
  meqs_date   DateTime
  notes       String

  created_by   String
  updated_by   String?
  cancelled_by String?

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  cancelled_at DateTime?

  jo             JO?            @relation(fields: [jo_id], references: [id], onDelete: Restrict)
  rv             RV?            @relation(fields: [rv_id], references: [id], onDelete: Restrict)
  spr            SPR?           @relation(fields: [spr_id], references: [id], onDelete: Restrict)
  meqs_approvers MEQSApprover[]
  meqs_suppliers MEQSSupplier[]

  metadata Json?

  @@index([meqs_date])
  @@map("material_equipment_quotation_summary")
}

model MEQSSupplier {
  id            String @id @default(uuid())
  meqs_id       String
  supplier_id   String
  payment_terms String

  meqs                MEQS                     @relation(fields: [meqs_id], references: [id], onDelete: Cascade)
  supplier            Supplier                 @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  attachments         MEQSSupplierAttachment[]
  meqs_supplier_items MEQSSupplierItem[]
  po                  PO?

  metadata Json?

  @@unique([meqs_id, supplier_id])
  @@index([meqs_id, supplier_id])
  @@map("meqs_supplier")
}

model MEQSSupplierItem {
  id               String  @id @default(uuid())
  meqs_supplier_id String
  canvass_item_id  String
  price            Float
  notes            String
  is_awarded       Boolean @default(false)
  vat_type         Int     @default(1)

  canvass_item  CanvassItem  @relation(fields: [canvass_item_id], references: [id], onDelete: Cascade)
  meqs_supplier MEQSSupplier @relation(fields: [meqs_supplier_id], references: [id], onDelete: Cascade)

  rr_items       RRItem[]  

  metadata Json?

  @@index([meqs_supplier_id, canvass_item_id])
  @@map("meqs_supplier_item")
}

model MEQSSupplierAttachment {
  id               String @id @default(uuid())
  meqs_supplier_id String
  filename         String @default("no_filename")
  src              String @unique

  meqs_supplier MEQSSupplier @relation(fields: [meqs_supplier_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([meqs_supplier_id])
  @@map("meqs_supplier_attachment")
}

model MEQSApprover {
  id            String    @id @default(uuid())
  meqs_id       String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int

  meqs MEQS @relation(fields: [meqs_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([meqs_id])
  @@map("meqs_approver")
}

model PO {
  id               String   @id @default(uuid())
  meqs_supplier_id String?   @unique
  po_number        String   @unique
  fund_source_id   String?
  po_date          DateTime
  notes            String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  meqs_supplier MEQSSupplier? @relation(fields: [meqs_supplier_id], references: [id], onDelete: Restrict)
  rrs           RR[]
  po_approvers  POApprover[]

  metadata Json?

  @@index([po_date])
  @@map("purchase_order")
}

model POApprover {
  id            String    @id @default(uuid())
  po_id         String
  approver_id   String
  date_approval DateTime?
  notes         String?
  status        Int
  label         String
  order         Int

  po PO @relation(fields: [po_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([po_id])
  @@map("po_approver")
}

model RR {
  id              String   @id @default(uuid())
  po_id           String?
  rr_number       String   @unique
  rr_date         DateTime
  received_by_id  String
  invoice_number  String @unique
  delivery_number String?
  notes           String
  delivery_charge Float
  is_completed    Boolean  @default(false)

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  po           PO?           @relation(fields: [po_id], references: [id], onDelete: Restrict)
  rr_approvers RRApprover[]
  rr_items     RRItem[]

  metadata Json?

  @@index([po_id, rr_date])
  @@map("receiving_report")
}

model RRApprover {
  id            String    @id @default(uuid())
  rr_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int

  rr RR @relation(fields: [rr_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([rr_id])
  @@map("rr_approver")
}

model RRItem {
  id                    String  @id @default(uuid())
  rr_id                 String
  meqs_supplier_item_id String
  quantity_accepted     Int

  rr                 RR                @relation(fields: [rr_id], references: [id], onDelete: Cascade)
  item_transaction   ItemTransaction?

  meqs_supplier_item MEQSSupplierItem @relation(fields: [meqs_supplier_item_id], references: [id], onDelete: Restrict)

  metadata Json?

  @@index([rr_id, meqs_supplier_item_id])
  @@map("rr_item")
}





// ========================= WAREHOUSING ========================= 

model OSRIV {
  id                String    @id @default(uuid())
  osriv_number         String    @unique
  date_requested    DateTime
  purpose             String
  is_completed    Boolean  @default(false)

  requested_by_id String
  department_id String
  item_from_id String
  supervisor_id String
  warehouse_custodian_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  osriv_approvers OSRIVApprover[]
  osriv_items OSRIVItem[]

  metadata Json?

  @@index([date_requested])
  @@map("osriv")
}

model OSRIVApprover {
  id            String    @id @default(uuid())
  osriv_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  order         Int
  is_supervisor Boolean @default(false)
  is_warehouse_custodian Boolean @default(false)

  osriv OSRIV @relation(fields: [osriv_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([osriv_id])
  @@map("osriv_approver")
}

model OSRIVItem {
  id            String    @id @default(uuid())
  osriv_id         String
  item_id         String
  quantity     Int
  price      Float @default(0)

  osriv OSRIV @relation(fields: [osriv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  metadata Json?

  @@index([osriv_id, item_id])
  @@map("osriv_item")
}

model SERIV {
  id                String    @id @default(uuid())
  seriv_number         String    @unique
  date_requested    DateTime
  purpose             String
  is_completed    Boolean  @default(false)

  request_type Int
  or_number String?
  mwo_number String?
  cwo_number String?
  jo_number String
  consumer_name String
  location String

  requested_by_id String
  withdrawn_by_id String?
  item_from_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  seriv_approvers SERIVApprover[]
  seriv_items SERIVItem[]
  mcrt MCRT?

  metadata Json?

  @@index([date_requested])
  @@map("seriv")
}

model SERIVApprover {
  id            String    @id @default(uuid())
  seriv_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  label_id         String
  order         Int

  seriv SERIV @relation(fields: [seriv_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@unique([seriv_id, label_id]) // para pag update sa specific approver
  @@index([seriv_id])
  @@map("seriv_approver")
}

model SERIVItem {
  id            String    @id @default(uuid())
  seriv_id         String
  item_id         String
  quantity     Int
  price      Float @default(0)

  seriv SERIV @relation(fields: [seriv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  metadata Json?

  @@index([seriv_id, item_id])
  @@map("seriv_item")
}

model MRV {
  id                String    @id @default(uuid())
  project_id                String
  mrv_number         String    @unique
  date_requested    DateTime
  purpose             String
  
  request_type Int
  or_number String?
  mwo_number String?
  cwo_number String?
  jo_number String
  consumer_name String
  location String

  requested_by_id String
  withdrawn_by_id String?
  item_from_id String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  item_from      Station      @relation(fields: [item_from_id], references: [id], onDelete: Restrict)
  mrv_approvers MRVApprover[]
  mrv_items MRVItem[]
  mct MCT?
  project Project @relation(fields: [project_id], references: [id], onDelete: Restrict)

  metadata Json?

  @@index([date_requested])
  @@map("mrv")
}

model MRVApprover {
  id            String    @id @default(uuid())
  mrv_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  label_id         String
  order         Int

  mrv MRV @relation(fields: [mrv_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@unique([mrv_id, label_id]) // para pag update sa specific approver
  @@index([mrv_id])
  @@map("mrv_approver")
}

model MRVItem {
  id            String    @id @default(uuid())
  mrv_id         String
  item_id         String
  quantity     Int
  price      Float @default(0)

  mrv MRV @relation(fields: [mrv_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  metadata Json?

  @@index([mrv_id, item_id])
  @@map("mrv_item")
}

model MCT {
  id                String    @id @default(uuid())
  mrv_id                String @unique
  mct_number         String    @unique
  mct_date    DateTime
  is_completed    Boolean  @default(false)

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  mrv      MRV      @relation(fields: [mrv_id], references: [id], onDelete: Restrict)
  mct_approvers MCTApprover[]
  mcrt MCRT?

  metadata Json?

  @@index([mrv_id, mct_date])
  @@map("mct")
}

model MCTApprover {
  id            String    @id @default(uuid())
  mct_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  label_id         String
  order         Int

  mct MCT @relation(fields: [mct_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([mct_id])
  @@map("mct_approver")
}

model MCRT {
  id                String    @id @default(uuid())
  mct_id                String? @unique
  seriv_id                String? @unique
  mcrt_number         String    @unique
  mcrt_date    DateTime
  is_completed    Boolean  @default(false)

  returned_by_id String

  wo_number String?
  mo_number String?
  jo_number String?

  note String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  mct      MCT?      @relation(fields: [mct_id], references: [id], onDelete: Restrict)
  seriv      SERIV?      @relation(fields: [seriv_id], references: [id], onDelete: Restrict)
  mcrt_approvers MCRTApprover[]
  mcrt_items MCRTItem[]

  metadata Json?

  @@index([mcrt_date])
  @@map("mcrt")
}

model MCRTApprover {
  id            String    @id @default(uuid())
  mcrt_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  label_id         String
  order         Int

  mcrt MCRT @relation(fields: [mcrt_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([mcrt_id])
  @@map("mcrt_approver")
}

model MCRTItem {
  id            String    @id @default(uuid())
  mcrt_id         String
  item_id         String
  quantity     Int
  price      Float @default(0)

  mcrt MCRT @relation(fields: [mcrt_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)
  item_transaction   ItemTransaction?

  metadata Json?

  @@index([mcrt_id, item_id])
  @@map("mcrt_item")
}

model MST {
  id                String    @id @default(uuid())
  mst_number         String    @unique
  mst_date    DateTime

  returned_by_id String

  cwo_number String?
  mwo_number String?
  jo_number String?

  remarks String

  cancelled_by String?
  created_by   String
  updated_by   String?

  cancelled_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  mst_approvers MSTApprover[]
  mst_items MSTItem[]

  metadata Json?

  @@index([mst_date])
  @@map("mst")
}

model MSTApprover {
  id            String    @id @default(uuid())
  mst_id         String
  approver_id   String
  date_approval DateTime?
  notes         String
  status        Int
  label         String
  label_id         String
  order         Int

  mst MST @relation(fields: [mst_id], references: [id], onDelete: Cascade)

  metadata Json?

  @@index([mst_id])
  @@map("mst_approver")
}

model MSTItem {
  id            String    @id @default(uuid())
  mst_id         String
  item_id         String
  quantity     Int
  price      Float @default(0)

  mst MST @relation(fields: [mst_id], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [item_id], references: [id], onDelete: Restrict)

  metadata Json?

  @@index([mst_id, item_id])
  @@map("mst_item")
}