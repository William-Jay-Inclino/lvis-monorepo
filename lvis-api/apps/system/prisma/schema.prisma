generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum DivisionStatus {
  ACTIVE
  INACTIVE
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}

enum UserLogEventType {
  LOGIN
  LOGOUT
}

model Audit {
  id           String   @id @default(cuid()) 
  username     String 
  database        String   
  table        String   
  action       String   
  reference_id String?  
  metadata     Json?    
  ip_address   String? 
  device_info  Json?    
  created_at   DateTime @default(now()) @db.Timestamptz
  notes        String?  

  @@index([username])
  @@index([database, table])
  @@map("system_audit")
}

model Division {
  id            String     @id @default(uuid())
  department_id String
  department    Department @relation(fields: [department_id], references: [id], onDelete: Restrict)
  code          String     @unique
  name          String
  status        DivisionStatus        @default(ACTIVE)
  permissions Json?

  employees Employee[]

  created_at DateTime  @default(now()) @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  @@index([department_id])
  @@map("division")
}

model Department {
  id     String @id @default(uuid())
  code   String @unique
  name   String
  status DepartmentStatus    @default(ACTIVE)
  permissions Json?

  created_at DateTime  @default(now()) @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  divisions Division[]
  employees Employee[]

  @@map("department")
}

model Account {
  id          String @id @default(uuid())
  code        String @unique
  name        String

  created_at DateTime  @default(now()) @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  @@index([deleted_at])
  @@map("account")
}

model Employee {
  id         String  @id @default(uuid())
  employee_number String @unique
  rank_number Int
  department_id String
  division_id String?
  firstname  String 
  middlename String?
  lastname   String
  name_prefix String?
  name_suffix String?
  signature_src String?
  position String @default("TBA")
  status EmployeeStatus @default(ACTIVE)

  jo_approver_setting   JOApproverSetting?   @relation("JOApproverSetting")
  meqs_approver_setting MEQSApproverSetting? @relation("MEQSApproverSetting")
  po_approver_setting   POApproverSetting?   @relation("POApproverSetting")
  rv_approver_setting   RVApproverSetting?   @relation("RVApproverSetting")
  spr_approver_setting  SPRApproverSetting?  @relation("SPRApproverSetting")
  rr_approver_setting   RRApproverSetting?   @relation("RRApproverSetting")

  department Department @relation(fields: [department_id], references: [id], onDelete: Restrict)
  division Division? @relation(fields: [division_id], references: [id], onDelete: Restrict)

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  user_employee UserEmployee?


  @@index([lastname])
  @@index([firstname])
  @@index([middlename])
  @@index([rank_number])
  @@index([department_id])
  @@index([division_id])
  @@index([status])
  @@map("employee")
}

model Classification {
  id   String @id @default(uuid())
  name String

  created_at DateTime  @default(now()) @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  @@index([deleted_at])
  @@map("classification")
}

model User {
  id          String  @id @default(uuid())
  username    String  @unique
  password    String
  firstname   String  @default("")
  middlename  String?
  lastname    String  @default("")
  status      UserStatus     @default(ACTIVE)
  role        Role    @default(USER)
  permissions Json?

  created_by String
  updated_by String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  user_employee UserEmployee?
  groups      UserGroupMembers[]  

  @@index([lastname])
  @@index([firstname])
  @@index([middlename])
  @@index([status])
  @@map("user")
  user_audit_logs UserAuditLog[]
}

model UserGroup {
  id          Int          @id @default(autoincrement())  
  name        String                                     
  members     UserGroupMembers[]   

  created_at DateTime  @default(now()) @db.Timestamptz

  @@map("user_group")
}

model UserGroupMembers {
  user_id     String         
  user_group_id    Int         

  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_group      UserGroup   @relation(fields: [user_group_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now()) @db.Timestamptz

  @@id([user_id, user_group_id])
  @@map("user_group_member")
}

model UserEmployee {
  id          String   @id @default(uuid())
  user_id     String   @unique
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  employee_id String   @unique
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  created_by String
  created_at DateTime @default(now()) @db.Timestamptz

  @@index([employee_id])
  @@index([user_id])
  @@map("user_employee")
}

model UserAuditLog {
  id             Int      @id @default(autoincrement())
  user_id         String
  event_type      UserLogEventType
  event_timestamp DateTime @default(now()) @db.Timestamptz
  ip_address      String
  device_info     Json?

  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_audit_log")
  @@index([user_id])
}

model JOApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("JOApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("jo_approver_setting")
}

model RVApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("RVApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("rv_approver_setting")
}

model SPRApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("SPRApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("spr_approver_setting")
}

model MEQSApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("MEQSApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("meqs_approver_setting")
}

model POApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("POApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("po_approver_setting")
}

model RRApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_at DateTime @default(now()) @db.Timestamptz

  approver Employee @relation("RRApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("rr_approver_setting")
}

model Setting {
  id         Int     @id @default(autoincrement())
  key String @unique
  value String 

  @@map("setting")
}