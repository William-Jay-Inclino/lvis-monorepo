generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Audit {
  id           String   @id @default(cuid()) 
  username     String 
  table        String   
  action       String   
  reference_id String?  
  metadata     Json?    
  ip_address   String? 
  device_info  Json?    
  created_at   DateTime @default(now()) @db.Timestamptz
  notes        String?  

  @@index([username])
  @@index([table])
  @@map("powerserve_audit")
}

enum LinemanStatus {
  ACTIVE
  INACTIVE
}

model Lineman {
  id            String   @id @default(uuid())
  employee_id   String   @unique
  area_id       String 
  supervisor_id String
  status        LinemanStatus @default(ACTIVE)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @updatedAt @db.Timestamptz

  // relationships
  area                  Area @relation(fields: [area_id], references: [id], onDelete: Restrict)
  power_interruptions   PowerInterruptionLineman[]
  kwh_meters            KwhMeterLineman[]
  line_services         LineServicesLineman[]
  dles                  DlesLineman[]
  lmdgas                LmdgaLineman[]
  schedule              LinemanSchedule? @relation("LinemanToSchedule")

  @@map("lineman")
}

model LinemanSchedule {
  id          String   @id @default(uuid())
  lineman_id  String   @unique
  mon_shift_id Int
  tue_shift_id Int
  wed_shift_id Int
  thu_shift_id Int
  fri_shift_id Int
  sat_shift_id Int
  sun_shift_id Int

  // relationships with explicit relation names
  mon_shift Shift @relation("MondayShift", fields: [mon_shift_id], references: [id], onDelete: Restrict)
  tue_shift Shift @relation("TuesdayShift", fields: [tue_shift_id], references: [id], onDelete: Restrict)
  wed_shift Shift @relation("WednesdayShift", fields: [wed_shift_id], references: [id], onDelete: Restrict)
  thu_shift Shift @relation("ThursdayShift", fields: [thu_shift_id], references: [id], onDelete: Restrict)
  fri_shift Shift @relation("FridayShift", fields: [fri_shift_id], references: [id], onDelete: Restrict)
  sat_shift Shift @relation("SaturdayShift", fields: [sat_shift_id], references: [id], onDelete: Restrict)
  sun_shift Shift @relation("SundayShift", fields: [sun_shift_id], references: [id], onDelete: Restrict)

  lineman Lineman @relation("LinemanToSchedule", fields: [lineman_id], references: [id], onDelete: Cascade)

  @@map("lineman_schedule")
}

model Shift {
  id         Int     @id
  name        String   @unique
  start_time  DateTime @db.Timestamptz
  end_time    DateTime @db.Timestamptz
  is_day_off  Boolean  @default(false)

  // back relations with explicit names
  monday_schedules    LinemanSchedule[] @relation("MondayShift")
  tuesday_schedules   LinemanSchedule[] @relation("TuesdayShift")
  wednesday_schedules LinemanSchedule[] @relation("WednesdayShift")
  thursday_schedules  LinemanSchedule[] @relation("ThursdayShift")
  friday_schedules    LinemanSchedule[] @relation("FridayShift")
  saturday_schedules  LinemanSchedule[] @relation("SaturdayShift")
  sunday_schedules    LinemanSchedule[] @relation("SundayShift")

  @@map("shift")
}

model Area {
  id     String @id @default(uuid())
  oic_id     String @unique  // reference: employee_id in system database -> employee table
  name        String @unique   

  // relationships
  linemen Lineman[]
  municipalities Municipality[]
  task_assignments TaskAssignment[]

  @@map("area")
}

model Municipality {
  id     String @id @default(uuid())
  area_id     String 
  name        String @unique   

  area Area @relation(fields: [area_id], references: [id], onDelete: Restrict)
  barangays Barangay[]

  @@map("municipality")
}

model Barangay {
  id     String @id @default(uuid())
  municipality_id     String 
  name        String @unique   

  municipality Municipality @relation(fields: [municipality_id], references: [id], onDelete: Restrict)
  sitios Sitio[]
  complaint_details ComplaintDetail[]

  power_interruptions TaskDetailPowerInterruption[]
  kwh_meters TaskDetailKwhMeter[]
  line_services TaskDetailLineServices[]
  dles TaskDetailDles[]
  lmdgas TaskDetailLmdga[]

  @@map("barangay")
}

model Sitio {
  id     String @id @default(uuid())
  barangay_id     String 
  name        String 

  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  complaint_details ComplaintDetail[]

  @@unique([name, barangay_id])
  @@map("sitio")
}

model Feeder {
  id     String @id @default(uuid())
  name        String @unique   

  power_interruption_tasks TaskDetailPowerInterruption[]
  lmdga_tasks TaskDetailLmdga[]

  @@map("feeder")
}

model WeatherCondition {
  id     String @id @default(uuid())
  code        String @unique   
  name        String 

  power_interruption_tasks TaskDetailPowerInterruption[]

  @@map("weather_condition")
}

model Device {
  id     String @id @default(uuid())
  code        String @unique   
  name        String 

  power_interruption_tasks TaskDetailPowerInterruption[]

  @@map("device")
}

model MeterBrand {
  id     String @id @default(uuid())
  name        String @unique   

  kwh_meter_tasks TaskDetailKwhMeter[]

  @@map("meter_brand")
}

model Unit {
  id     String @id @default(uuid())
  name        String @unique   
  
  activities Activity[]

  @@map("unit")
}

model ActivityCategoryCause {
  id     String @id @default(uuid())
  category_id Int?
  code        String? @unique   
  name        String
  
  category ActivityCategory? @relation(fields: [category_id], references: [id], onDelete: Restrict)
  power_interruptions TaskDetailPowerInterruption[]
  kwh_meters TaskDetailKwhMeter[]
  line_services TaskDetailLineServices[]
  dles TaskDetailDles[]

  @@map("activity_category_cause")
}

model Equipment {
  id     String @id @default(uuid())
  code        String @unique   
  name        String 
  
  power_interruptions TaskDetailPowerInterruption[]

  @@map("equipment")
}

model Remarks {
  id         Int     @id @default(autoincrement())
  min        Int   
  max        Int 
  label String
  color_class String @default("")
  
  @@map("remarks")
}

model Activity {
  id   String @id @default(uuid())
  category_id Int 
  unit_id String 
  code String @unique 
  name String 
  quantity Int @default(0)
  num_of_personnel Int @default(1)

  category ActivityCategory? @relation(fields: [category_id], references: [id], onDelete: Restrict)
  tasks Task[]
  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict)

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime  @updatedAt @db.Timestamptz


  @@map("activity")
}

model ActivityCategory {
  id         Int     @id
  name String 

  activities Activity[]
  causes ActivityCategoryCause[]

  @@map("activity_category")
}

model Complaint {
  id         Int     @id @default(autoincrement())
  report_type_id Int
  complaint_status_id Int
  assigned_group_id String 
  assigned_group_type Int
  ref_number       String   @unique
  complainant_name       String
  complainant_contact_no       String
  description       String
  remarks       String?

  created_by String 

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  // relationships
  complaint_detail ComplaintDetail?
  logs ComplaintLog[]
  tasks Task[]
  report_type ComplaintReportType @relation(fields: [report_type_id], references: [id], onDelete: Restrict)
  status ComplaintStatus @relation(fields: [complaint_status_id], references: [id], onDelete: Restrict)

  @@map("complaint")
}

model ComplaintDetail {
  id         Int     @id @default(autoincrement())
  complaint_id Int @unique
  consumer_id String? // from cmbis
  barangay_id String
  sitio_id String?
  landmark String?

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  // relationship
  complaint Complaint @relation(fields: [complaint_id], references: [id], onDelete: Cascade)
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  sitio Sitio? @relation(fields: [sitio_id], references: [id], onDelete: Restrict)

  @@map("complaint_detail")
}

model ComplaintStatus {
  id         Int     @id
  name String @unique
  color_class String @default("")
  description String @default("")

  complaints Complaint[]
  logs ComplaintLog[]

  @@map("complaint_status")
}

model ComplaintReportType {
  id         Int     @id
  name String @unique

  complaints Complaint[]

  @@map("complaint_report_type")
}

model ComplaintLog {
  id         Int     @id @default(autoincrement())
  complaint_id Int 
  complaint_status_id Int 
  remarks String?
  created_by String 
  created_at DateTime  @default(now()) @db.Timestamptz

  // relationships
  complaint Complaint @relation(fields: [complaint_id], references: [id], onDelete: Cascade)
  status ComplaintStatus @relation(fields: [complaint_status_id], references: [id], onDelete: Restrict)

  @@map("complaint_log")
}

model Task {
  id         Int     @id @default(autoincrement())
  ref_number       String   @unique
  complaint_id Int?
  assignee_id String? // reference: employee_id in system database -> employee table
  task_status_id Int 
  activity_id String?
  description String 
  remarks String?
  accomplishment_qty Float? 
  action_taken String 
  acted_at DateTime? @db.Timestamptz

  created_by String 

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz

  task_assignment TaskAssignment?
  logs TaskLog[]
  files TaskFile[]
  complaint Complaint? @relation(fields: [complaint_id], references: [id], onDelete: Restrict)
  status TaskStatus @relation(fields: [task_status_id], references: [id], onDelete: Restrict)
  activity Activity? @relation(fields: [activity_id], references: [id], onDelete: Restrict)
  task_detail_power_interruption TaskDetailPowerInterruption?
  task_detail_kwh_meter TaskDetailKwhMeter?
  task_detail_line_services TaskDetailLineServices?
  task_detail_dles TaskDetailDles?
  task_detail_lmdga TaskDetailLmdga?

  @@map("task")
}

model TaskAssignment {
  id         Int     @id @default(autoincrement())
  task_id Int @unique
  area_id String? 
  department_id String? 
  division_id String? 
  
  created_by String 
  created_at DateTime  @default(now()) @db.Timestamptz

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
  area Area? @relation(fields: [area_id], references: [id], onDelete: Restrict)

  @@map("task_assignment")
}

model TaskLog {
  id         Int     @id @default(autoincrement())
  task_id Int 
  task_status_id Int 
  remarks String?
  
  created_by String 
  created_at DateTime  @default(now()) @db.Timestamptz

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
  status TaskStatus @relation(fields: [task_status_id], references: [id], onDelete: Restrict)

  @@map("task_log")
}

model TaskFile {
  id         Int     @id @default(autoincrement())
  task_id Int 
  filename String 
  source_path String 

  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@map("task_file")
}

model TaskStatus {
  id         Int     @id
  name String @unique
  color_class String @default("")
  description String @default("")

  tasks Task[]
  logs TaskLog[]

  @@map("task_status")
}

model TaskDetailPowerInterruption {
  id         Int     @id @default(autoincrement())
  task_id Int  @unique
  feeder_id String 
  weather_condition_id String 
  device_id String 
  cause_id String 
  barangay_id     String 
  distance_travel_in_km Float @default(0)
  affected_area String 
  equipment_failed_id String 
  fuse_rating String?

  // relationships
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  cause ActivityCategoryCause @relation(fields: [cause_id], references: [id], onDelete: Restrict)
  linemen_incharge PowerInterruptionLineman[]
  feeder Feeder @relation(fields: [feeder_id], references: [id], onDelete: Restrict)
  weather_condition WeatherCondition @relation(fields: [weather_condition_id], references: [id], onDelete: Restrict)
  device Device @relation(fields: [device_id], references: [id], onDelete: Restrict)
  equipment_failed Equipment @relation(fields: [equipment_failed_id], references: [id], onDelete: Restrict)
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@map("task_detail_power_interruption")
}

model PowerInterruptionLineman {
  id         Int     @id @default(autoincrement())
  task_detail_id Int 
  lineman_id String 
  
  task_detail TaskDetailPowerInterruption @relation(fields: [task_detail_id], references: [id], onDelete: Cascade)
  lineman Lineman @relation(fields: [lineman_id], references: [id], onDelete: Restrict)

  @@map("power_interruption_lineman")
}

model TaskDetailKwhMeter {
  id         Int     @id @default(autoincrement())
  task_id Int @unique
  barangay_id     String 
  cause_id String 
  distance_travel_in_km Float @default(0)
  meter_number String  
  meter_brand_id String  
  last_reading String?
  initial_reading String?  
  meter_class String?  

  // relationships
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  cause ActivityCategoryCause @relation(fields: [cause_id], references: [id], onDelete: Restrict)
  linemen_incharge KwhMeterLineman[]
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
  meter_brand MeterBrand @relation(fields: [meter_brand_id], references: [id], onDelete: Restrict)

  @@map("task_detail_kwh_meter")
}

model KwhMeterLineman {
  id         Int     @id @default(autoincrement())
  task_detail_id Int 
  lineman_id String 
  
  task_detail TaskDetailKwhMeter @relation(fields: [task_detail_id], references: [id], onDelete: Cascade)
  lineman Lineman @relation(fields: [lineman_id], references: [id], onDelete: Restrict)

  @@map("kwh_meter_lineman")
}

model TaskDetailLineServices {
  id         Int     @id @default(autoincrement())
  task_id Int @unique
  barangay_id     String 
  cause_id     String 
  distance_travel_in_km Float @default(0)
  order_number String?
  mrv_number String? 
  seriv_number String? 
  mst_number String? 
  mcrt_number String? 

  // relationships
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  cause ActivityCategoryCause @relation(fields: [cause_id], references: [id], onDelete: Restrict)
  linemen_incharge LineServicesLineman[]
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@map("task_detail_line_services")
}

model LineServicesLineman {
  id         Int     @id @default(autoincrement())
  task_detail_id Int 
  lineman_id String 
  
  task_detail TaskDetailLineServices @relation(fields: [task_detail_id], references: [id], onDelete: Cascade)
  lineman Lineman @relation(fields: [lineman_id], references: [id], onDelete: Restrict)

  @@map("line_services_lineman")
}

model TaskDetailDles {
  id         Int     @id @default(autoincrement())
  task_id Int @unique
  barangay_id     String 
  cause_id     String 
  distance_travel_in_km Float @default(0)
  sco_number String?
  old_serial_number String? 
  new_serial_number String?
  seriv_number String?
  kva_rating String? 

  // relationships
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  cause ActivityCategoryCause @relation(fields: [cause_id], references: [id], onDelete: Restrict)
  linemen_incharge DlesLineman[]
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  // task_detail_distribution_line_equipment_services
  @@map("task_detail_dles")
}

model DlesLineman {
  id         Int     @id @default(autoincrement())
  task_detail_id Int 
  lineman_id String 
  
  task_detail TaskDetailDles @relation(fields: [task_detail_id], references: [id], onDelete: Cascade)
  lineman Lineman @relation(fields: [lineman_id], references: [id], onDelete: Restrict)

  @@map("dles_lineman")
}

model TaskDetailLmdga {
  id         Int     @id @default(autoincrement())
  task_id Int @unique
  barangay_id     String 
  distance_travel_in_km Float @default(0)
  kva_rating String?
  substation_id String
  dt_location String? 
  feeder_id String
  phase_number String? 
  number_of_hc String? 
  number_of_spans String? 
  copper_aluminum_primary String? 
  copper_aluminum_secondary String? 
  copper_aluminum_ground String? 
  size_primary String? 
  size_secondary String? 
  size_ground String? 
  terminal_connector_primary String? 
  terminal_connector_secondary String? 
  terminal_connector_ground String? 
  tap_position String? 
  brand String? 
  number_of_bushing_primary String? 
  number_of_bushing_secondary String? 
  protective_device String? 
  load_current_sec_bushing String? 
  load_current_neutral String? 
  load_current_one String? 
  load_current_two String? 
  voltage_level_one String? 
  voltage_level_two String? 
  sec_line_conductor_size_one String? 
  sec_line_conductor_size_two String? 

  // relationships
  barangay Barangay @relation(fields: [barangay_id], references: [id], onDelete: Restrict)
  linemen_incharge LmdgaLineman[]
  feeder Feeder @relation(fields: [feeder_id], references: [id], onDelete: Restrict)
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  // task_detail_load_management_and_data_gathering_activities
  @@map("task_detail_lmdga")
}

model LmdgaLineman {
  id         Int     @id @default(autoincrement())
  task_detail_id Int 
  lineman_id String 
  
  task_detail TaskDetailLmdga @relation(fields: [task_detail_id], references: [id], onDelete: Cascade)
  lineman Lineman @relation(fields: [lineman_id], references: [id], onDelete: Restrict)

  @@map("lmdga_lineman")
}